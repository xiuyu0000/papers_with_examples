# Copyright 2022   Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Loss cell."""

import mindspore
import mindspore.nn as nn
from mindspore.ops import Div


class GramLoss(nn.Cell):
    r"""
    Calculate gram style loss.

    .. math::
        L_{gra}(G,D) = E_{p_{i}\sim S_{data}(p)},E_{x_{i}\sim S_{data}(x)}\lbrack\left| \left| {Gram(VGG}_{l}
        \left( G\left( p_{i} \right) \right)) - {Gram(VGG}_{l}\left( p_{i} \right)) \right| \right|_{1}\rbrack

    Where, Gram represents the Gram matrix of the feature graph. :math:`G(p_{I})` represents the image generated by the
    generator, and :math:`p_{I}` represents the input content graph.

    Inputs:
        - **image** (tensor) - Original anime image.
        - **image_g** (tensor) - Fake anime image.

    Outputs:
        - **gram_loss** (tensor) - Gram loss.

    Supported Platforms:
        ``Ascend`` ``GPU`` ``CPU``

    Examples:
        >>> gram_loss = GramLoss()
    """
    def __init__(self):
        super(GramLoss, self).__init__()
        self.l1 = nn.L1Loss()
        self.div = Div()

    def construct(self, image, image_g):
        """ build network """
        gram_loss = self.l1(self.gram(image), self.gram(image_g))
        return gram_loss

    def gram(self, image):
        r"""
        Calculate the Gram matrix of the image.

        .. math::
            G=\frac{[x_iâ‹…x_i]_(N*N)}{(B*C*W*H)}

        Args:
            image (tensor): Input image.

        Returns:
            Tensor, gram matrix.
        """

        b = image.shape[0]
        c = image.shape[1]
        w = image.shape[2]
        h = image.shape[3]
        x = image.view((b * c, w * h))
        out = mindspore.numpy.tensordot(x, x.T)
        return self.div(out, b * c * w * h)
